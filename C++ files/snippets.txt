// swap
template <class T>
void swap(T *a, T *b)
{
    T temp = *a;
    *a = *b;
    *b = *temp;
}


// from string to vector
vector<string> SplitIntoWords(const string &text)
{
    vector<string> words;
    string word;
    for (int i = 0; i < text.size(); ++i)
    {
        if (text[i] == ' ')
        {
            words.push_back(word);
            word = "";
        }
        else
        {
            word += text[i];
        }
    }

    words.push_back(word);

    return words;
}


// Selection sort
const int size = 10; int arr[size]; char direction;
cin >> direction; // '>' or '<'
SelectionSort(arr, direction, size);
void SelectionSort(int *arr, const char direction, const int size)
{
    int min = 0;
    int temp = 0;

    for (int i = 0; i < size; i++)
    {
        min = i;
        for (int j = i + 1; j < size; j++)
            if (direction == '<')
                if (arr[j] < arr[min])
                    min = j;
            else if (direction == '>')
                if (arr[j] > arr[min])
                    min = j;

        temp = arr[i];
        arr[i] = arr[min];
        arr[min] = temp;
    }
}


// duration
auto start = chrono::high_resolution_clock::now();
// code //
auto end = chrono::high_resolution_clock::now();
chrono::duration<double> duration = end - start;
cout << duration.count() << endl;


// При использовании функции void дописывать к переменным параметров ссылки.
// Иначе будет происходить все манипуляции в переменных функции, а не main


// Добавление элементов из одного вектора в другой
void MoveStrings(vector<string> &source, vector<string> &destination)
{
    for (string &word : source)
        destination.push_back(word);
    source.clear();
}


// info
string ReadString()
{
    string query;
    getline(cin, query);
    return query;
}
const string query = ReadString();


// print map
map<string, int> variable_name = {{"string"s, int}, {"string"s, int}...}

void PrintMap(const map<TYPE> &leg_count)
{
    for (const auto &[key, value] : leg_count)
        cout << key << " " << value << endl;
}


void findroots(int a, int b, int c)
{
    int D = b * b - 4 * a * c;
    cout << "x1: " << (-b + sqrt(D)) / (2 * a) << " x2: " << (-b - sqrt(D)) / (2 * a) << endl;
}


void fillArray(int *arr, const int SIZE)
{
    for (size_t i = 0; i < SIZE; ++i)
        arr[i] = rand() % 99 + 1;
}


void printArray(int arr[], const int SIZE)
{
    for (size_t i = 0; i < SIZE; ++i)
        cout << arr[i] << " ";
    cout << endl;
}


int findMax(int *arr, const int SIZE)
{
    int max = arr[0];
    for (size_t i = 0; i < SIZE; ++i)
    {
        if (arr[i] > max)
        {
            max = arr[i];
        }
    }
    return max;
}


void printRectangle(int n, int m, string characters)
{
    for (size_t i = 0; i < n; ++i)
    {
        for (size_t j = 0; j < m; ++j)
        {
            cout << characters[rand() % characters.length()];
        }
        cout << endl;
    }
}


void clearTerminal()
{
    cout << "\x1B[2J\x1B[H";
}


map<char, int> frequency(string txt)
{
    map<char, int> frequency;
    for (int i = 0; i < txt.length(); ++i)
    {
        frequency[txt[i]]++;
    }
    return frequency;
}